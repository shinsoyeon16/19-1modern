채팅 서버에서 일어나는일
namespace ConsoleApplication1
{
    class Program
    {
        public static Hashtable clientsList = new Hashtable(); 

        static void Main(string[] args)
        {
            TcpListener serverSocket = new TcpListener(8888);
            TcpClient clientSocket = default(TcpClient);
            int counter = 0;

            serverSocket.Start();
            Console.WriteLine ("Chat Server Started ....");
            counter = 0;
            while ((true))
            {
                counter += 1;
                clientSocket = serverSocket.AcceptTcpClient();

                byte[] bytesFrom = new byte[10025];
                string dataFromClient = null;

                NetworkStream networkStream = clientSocket.GetStream();
                networkStream.Read(bytesFrom, 0, (int)clientSocket.ReceiveBufferSize);
                dataFromClient = System.Text.Encoding.ASCII.GetString(bytesFrom);
                dataFromClient = dataFromClient.Substring(0, dataFromClient.IndexOf("$"));

                clientsList.Add(dataFromClient, clientSocket);

                broadcast(dataFromClient + " Joined ", dataFromClient, false);

                Console.WriteLine(dataFromClient + " Joined chat room ");
                handleClinet client = new handleClinet();
                client.startClient(clientSocket, dataFromClient, clientsList);
            }

            clientSocket.Close();
            serverSocket.Stop();
            Console.WriteLine("exit");
            Console.ReadLine();
        }

        public static  void broadcast(string msg, string uName, bool flag)
        {
            foreach (DictionaryEntry Item in clientsList)
            {
                TcpClient broadcastSocket;
                broadcastSocket = (TcpClient)Item.Value;
                NetworkStream broadcastStream = broadcastSocket.GetStream();
                Byte[] broadcastBytes = null;

                if (flag == true)
                {
                    broadcastBytes = Encoding.ASCII.GetBytes(uName + " says : " + msg);
                }
                else
                {
                    broadcastBytes = Encoding.ASCII.GetBytes(msg);
                }

                broadcastStream.Write(broadcastBytes, 0, broadcastBytes.Length);
                broadcastStream.Flush();
            }
        }  //end broadcast function
    }//end Main class


    public class handleClinet
    {
        TcpClient clientSocket;
        string clNo;
        Hashtable clientsList;

        public void startClient(TcpClient inClientSocket, string clineNo, Hashtable cList)
        {
            this.clientSocket = inClientSocket;
            this.clNo = clineNo;
            this.clientsList = cList;
            Thread ctThread = new Thread(doChat);
            ctThread.Start();
        }

        private void doChat()
        {
            int requestCount = 0;
            byte[] bytesFrom = new byte[10025];
            string dataFromClient = null;
            Byte[] sendBytes = null;
            string serverResponse = null;
            string rCount = null;
            requestCount = 0;

            while ((true))
            {
                try
                {
                    requestCount = requestCount + 1;
                    NetworkStream networkStream = clientSocket.GetStream();
                    networkStream.Read(bytesFrom, 0, (int)clientSocket.ReceiveBufferSize);
                    dataFromClient = System.Text.Encoding.ASCII.GetString(bytesFrom);
                    dataFromClient = dataFromClient.Substring(0, dataFromClient.IndexOf("$"));
                    Console.WriteLine("From client - " + clNo + " : " + dataFromClient);
                    rCount = Convert.ToString(requestCount);

                    Program.broadcast (dataFromClient, clNo, true);
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.ToString());
                }
            }//end while
        }//end doChat
    } //end class handleClinet
}//end namespace


//서버 오픈
TcpListener serverSocket = new TcpListener(8888);

serverSocket.Start();

TcpClient clientSocket = default(TcpClient); //사용할 클라이언트 객체 선언

**반복문돌림**
clientSocket = serverSocket.AcceptTcpClient(); //접속한클라이언트를 클라소켓에 대입
스트림열고, 바이트배열선언 후, 바이트로읽어와서, 인코딩하고, 헤더정보분할한다.

읽어온데이터에서 아이디와 소켓객체를 해쉬테이블에 추가한다.

*브로드캐스트*
핸들클라이언트 클래스 객체생성
핸들클라이언트 객채의 start메소드 호출(소켓, 아이디, 전체리스트)를 넘김다.
**반복문 닫음**
클라소켓클로즈
서버소켓클로즈


//핸들클라이언트 클래스
/필드 클라소켓, 아이디, 리스트
/스타트메소드(소켓, 아이디, 리스트) 
  값 대입하고
  Thread ctThread = new Thread(doChat); //스레드 객체 생성 두챗으로
  ctThread.Start();

/두챗메소드
  **반복문 열음**
  스트림열고, 바이트로받아오고 , 인코딩하고, 분할하고 
  아이디랑 채팅내용 읽어옴
  *브로드캐스트*


//브로드캐스트 클래스(msg, 이름, 플래그)
  포이치 리스트 다쓸때까지
  소켓 스트림열고 스트링을 바이트로 인코딩하고 스트림에 보냄.










-------------------------------------------------------------------------

클라이언트에서 일어나는 일


namespace WindowsApplication2
{
    public partial class Form1 : Form
    {
        System.Net.Sockets.TcpClient clientSocket = new System.Net.Sockets.TcpClient();
        NetworkStream serverStream = default(NetworkStream);
        string readData = null;

        public Form1()
        {
            InitializeComponent();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            byte[] outStream = System.Text.Encoding.ASCII.GetBytes(textBox2.Text + "$");
            serverStream.Write(outStream, 0, outStream.Length);
            serverStream.Flush();
        }

        private void button2_Click(object sender, EventArgs e)
        {
            readData = "Conected to Chat Server ...";
            msg();
            clientSocket.Connect("127.0.0.1", 8888);
            serverStream = clientSocket.GetStream();

            byte[] outStream = System.Text.Encoding.ASCII.GetBytes(textBox3.Text + "$");
            serverStream.Write(outStream, 0, outStream.Length);
            serverStream.Flush();

            Thread ctThread = new Thread(getMessage);
            ctThread.Start();
        }

        private void getMessage()
        {
            while (true)
            {
                serverStream = clientSocket.GetStream();
                int buffSize = 0;
                byte[] inStream = new byte[10025];
                buffSize = clientSocket.ReceiveBufferSize;
                serverStream.Read(inStream, 0, buffSize);
                string returndata = System.Text.Encoding.ASCII.GetString(inStream);
                readData = "" + returndata;
                msg();
            }
        }

        private void msg()
        {
            if (this.InvokeRequired)
                this.Invoke(new MethodInvoker(msg));
            else
                textBox1.Text = textBox1.Text + Environment.NewLine + " >> " + readData;
        } 

    }
}


TcpClient clientSocket = new TcpClient();//클라객체 선언
**버튼1클릭시 //채팅버튼
텍스트박스의 데이터에 헤더코드 삽입한 스트링을
바이트로 인코딩해서 스트림에 써보냄

**버튼2 클릭시 //아이디전송 및 채팅스레드 시작
서버연결되었다는 메세지 화면에 노출
clientSocket.Connect("127.0.0.1", 8888); //서버에 연결
serverStream = clientSocket.GetStream(); //스트림 열고
텍스트박스의 데이터에 헤더코드 삽입한 스트링을
바이트로 인코딩해서 스트림에 써보냄
스레드 생성(겟메세지)
스레드 시작

**겟메세지함수
바이트배열 생성
서버스트림에서 데이터읽어옴
스트링으로 인코딩하고
리드데이터 메세지 화면에 노출

**msg 함수
화면에 이전글+=리드데이터 노출








-------------------------------------------

기능
1. 로그인 및 로그아웃시 로그인목록 업데이트
  -로그인 성공시 서버에 접속, 로그인$아이디$ 전달한다. 서버에서는 로그인된아이디 받아오면 온라인 목록에 추가한다.
  -로그아웃시 서버에 로그아웃$아이디를 전달한다. 서버에서는 로그아웃된 아이디를 받아오면 온라인목록에서 삭제한다.
2. 회원로그인시 로그인된친구목록에 알람감 / 로그아웃은 알람안감
 - 서버에서 로그인된 아이디 받아올때 알람함수에 아이디전달한다. 로그인한회원이 친구인 사람들에게 알람 가도록.
3. 접속중인 친구선택후 채팅누르면 채팅창뜸, 친구들에게는 창안뜨고 채팅목록에 추가됨(+알람)
  -버튼클릭시 채팅목록에 추가됨, 친구목록 객체 생성해서 채팅폼 리스트만들고 객체 다이아로그, 채팅창에서 채팅$아이디$상대방아디 
4. 시간남으면 채팅방 저장기능추가, 중복로그인방지기능 추가


서버 관리앱 만들어서
회원 관리, 회원친구목록보기, 채팅방보기, 채팅내용보기 












